import React, { useState } from 'react';
import HTMLReactParser from 'html-react-parser';
import { useRouter } from 'next/router';
import millify from 'millify';
import { AiOutlineDollarCircle, AiOutlineExclamationCircle, AiOutlineFundProjectionScreen, AiOutlineNumber, AiOutlineStop, AiOutlineThunderbolt } from "react-icons/ai"
import { BsTrophy } from "react-icons/bs"
import { GiMoneyStack } from "react-icons/gi"
import { useGetCryptoDetailsQuery, useGetCryptoHistoryQuery } from '../../services/cryptoApi';
import Head from 'next/head';
import Loader from '../../components/Loader';
import Header from '../../components/Header';
import LineChart from '../../components/LineChart';

const CryptoDetails = () => {
  const router = useRouter();
  const { id } = router.query
  const [timeperiod, setTimeperiod] = useState('7d');
  const { data, isFetching } = useGetCryptoDetailsQuery(id);
  const { data: coinHistory } = useGetCryptoHistoryQuery({ id, timeperiod });
  const cryptoDetails = data?.data?.coin;
    console.log(id, cryptoDetails, coinHistory)

  if (isFetching) return <Loader />;

  const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];

  const stats = [
    { title: 'Price to USD', value: `$ ${cryptoDetails?.price && millify(cryptoDetails?.price)}`, icon: <AiOutlineDollarCircle /> },
    { title: 'Rank', value: cryptoDetails?.rank, icon: <AiOutlineNumber /> },
    { title: '24h Volume', value: `$ ${cryptoDetails?.volume && millify(cryptoDetails?.volume)}`, icon: <AiOutlineThunderbolt /> },
    { title: 'Market Cap', value: `$ ${cryptoDetails?.marketCap && millify(cryptoDetails?.marketCap)}`, icon: <AiOutlineDollarCircle /> },
    { title: 'All-time-high(daily avg.)', value: `$ ${cryptoDetails?.allTimeHigh?.price && millify(cryptoDetails?.allTimeHigh?.price)}`, icon: <BsTrophy /> },
  ];

  const genericStats = [
    { title: 'Number Of Markets', value: cryptoDetails?.numberOfMarkets, icon: <AiOutlineFundProjectionScreen /> },
    { title: 'Number Of Exchanges', value: cryptoDetails?.numberOfExchanges, icon: <GiMoneyStack /> },
    { title: 'Aprroved Supply', value: cryptoDetails?.supply?.confirmed ? <AiOutlineDollarCircle /> : <AiOutlineStop />, icon: <AiOutlineExclamationCircle /> },
    { title: 'Total Supply', value: `$ ${cryptoDetails?.supply?.total && millify(cryptoDetails?.supply?.total)}`, icon: <AiOutlineExclamationCircle /> },
    { title: 'Circulating Supply', value: `$ ${cryptoDetails?.supply?.circulating && millify(cryptoDetails?.supply?.circulating)}`, icon: <AiOutlineExclamationCircle /> },
  ];

  return (
    <div className="h-full relative w-screen bg-teal-50 overflow-x-hidden">
      <Head>
        <title>{cryptoDetails?.name} ({data?.data?.coin.symbol}) live price in US Dollar (USD). View value statistics, market cap and supply.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="flex flex-col lg:px-24 px-6 my-8">
      <div className="flex flex-col space-y-8">
        <h4 className="font-bold text-blue-500 mx-auto text-2xl">
          {data?.data?.coin.name} ({data?.data?.coin.symbol}) Price
        </h4>
        <p className="font-normal mx-auto text-sm text-gray-700">{cryptoDetails?.name} live price in US Dollar (USD). View value statistics, market cap and supply.</p>
      </div>
      <select defaultValue="7d" className="h-8 text-sm text-gray-600 p-2 focus:outline-none bg-white w-36 my-5" placeholder="Select Timeperiod" onChange={(value) => setTimeperiod(value)}>
        {time.map((date) => <option key={date}>{date}</option>)}
      </select>
      <LineChart coinHistory={coinHistory} currentPrice={millify(cryptoDetails?.price)} coinName={cryptoDetails?.name} />
      <div className="grid grid-cols-12 space-x-6 justify-between items-center">
        <div className="lg:col-span-6 col-span-12 flex-col border-b border-gray-200">
          <div className="flex flex-col space-y-3">
            <h4 className="text-2xl mb-2 text-blue-500 font-semibold mt-4">{cryptoDetails?.name} Value Statistics</h4>
            <p className="text-sm">An overview showing the statistics of {cryptoDetails?.name}, such as the base and quote currency, the rank, and trading volume.</p>
          </div>
          {stats.map(({ icon, title, value }) => (
            <div key={title} className="flex justify-between items-center border-b hover:bg-white border-gray-200 text-md p-4">
              <div className="flex items-center space-x-3">
                <p className="text-xl">{icon}</p>
                <p className="text-sm">{title}</p>
              </div>
              <p className="font-bold">{value}</p>
            </div>
          ))}
        </div>
        <div className="lg:col-span-6 col-span-12 flex-col">
          <div className="flex flex-col space-y-3">
            <h4 className="text-2xl mb-2 text-blue-500 font-semibold mt-4">Other Stats Info</h4>
            <p className="text-sm">An overview showing the statistics of {cryptoDetails?.name}, such as the base and quote currency, the rank, and trading volume.</p>
          </div>
          {genericStats.map(({ icon, title, value }) => (
            <div key={title} className="flex justify-between items-center border-b hover:bg-white border-gray-200 text-md p-4">
              <div className="flex items-center space-x-3">
                <p className="text-2xl">{icon}</p>
                <p className="text-sm">{title}</p>
              </div>
              <p className="font-bold">{value}</p>
            </div>
          ))}
        </div>
      </div>
      <div className="flex flex-col space-y-6">
        <span className="my-3">
          <h4 className="text-blue-500 text-2xl flex flex-col space-3 font-bold">What is {cryptoDetails?.name}?</h4>
          <p className="text-sm text-gray-700 leading-loose">{HTMLReactParser(cryptoDetails.description)}</p>
        </span>
        <div className="flex flex-col space-y-4">
          <h4 className="text-xl text-blue-600 font-bold p-2">{cryptoDetails?.name} Links</h4>
          {cryptoDetails?.links?.map((link) => (
            <span className="flex flex-col" key={link.name}>
              <h4 className="text-md font-bold text-gray-800">{link.type}</h4>
              <a className="text-blue-600 tex-sm" href={link.url} target="_blank" rel="noreferrer">{link.name}</a>
            </span>
          ))}
        </div>
      </div>
      </div>
    </div>
  );
};

export default CryptoDetails;
